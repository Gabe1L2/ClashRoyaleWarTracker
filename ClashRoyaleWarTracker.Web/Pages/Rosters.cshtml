@page
@model ClashRoyaleWarTracker.Web.Pages.RostersModel
@{
    ViewData["Title"] = "Rosters";
}

<h1 class="mb-3">Rosters</h1>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="fas fa-check-circle me-2"></i>@TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="fas fa-exclamation-triangle me-2"></i>@TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<div class="mb-3 d-flex gap-2 align-items-center">
    <!-- Season/Week Selector -->
    <div>
        <label class="form-label mb-1">Viewing:</label>
        <form method="get" style="display: inline;">
            <select name="SelectedSeasonId" id="seasonWeekSelect" class="form-select" onchange="updateWeekIndexAndSubmit(this.value)" style="width: 250px;">
                @foreach (var sw in Model.AvailableSeasonWeeks)
                {
                    <option value="@sw.SeasonId" 
                            data-week-index="@sw.WeekIndex"
                            selected="@(sw.SeasonId == Model.SelectedSeasonId && sw.WeekIndex == Model.SelectedWeekIndex)">
                        @sw.Display
                    </option>
                }
            </select>
            <input type="hidden" name="SelectedWeekIndex" id="selectedWeekIndexInput" value="@Model.SelectedWeekIndex" />
        </form>
    </div>

    <input id="searchInput" class="form-control" style="width: 220px;" placeholder="Search by name or tag..." />
    <label class="form-check-label ms-2">
        <input id="unassignedOnly" type="checkbox" class="form-check-input me-1" /> Show only unassigned
    </label>
    <div class="ms-auto">
        @if (Model.SelectedSeasonId == 999 && Model.SelectedWeekIndex == 999)
        {
            <!-- Only show action buttons for current roster -->
            <form method="post" asp-page-handler="UpdateInClanStatus" style="display: inline;">
                @Html.AntiForgeryToken()
                <button type="submit" class="btn btn-warning me-1" title="Update IsInClan status for all players by checking their current clan via API">
                    <i class="fas fa-sync-alt"></i> Update All In-Clan Status
                </button>
            </form>
            <button class="btn btn-info me-1" type="button" onclick="showAutoRosterModal()">
                <i class="fas fa-magic"></i> Auto Roster
            </button>
            <button class="btn btn-secondary" type="button" onclick="copyPreviousWeek()">Copy Previous Week</button>
        }
        else
        {
            <!-- Read-only mode for historical rosters -->
            <span class="badge bg-info fs-6">
                <i class="fas fa-eye me-1"></i>Viewing Historical Data (Read-Only)
            </span>
        }
    </div>
</div>

<!-- Remove the wrapping form, just keep the content in a div -->
<div id="rosterContainer">
    @Html.AntiForgeryToken() <!-- Keep this for JavaScript functions -->
    @foreach (var group in Model.RosterAssignments
        .GroupBy(r => r.ClanID)
        .OrderByDescending(g => {
            var clan = Model.Clans.FirstOrDefault(c => c.ID == g.Key);
            return clan?.WarTrophies ?? 0;
        }))
    {
        var clan = Model.Clans.FirstOrDefault(c => c.ID == group.Key);
        var clanName = clan?.Name ?? "Unassigned";
        var groupKey = group.Key?.ToString() ?? "unassigned";
        <div class="card mb-3">
            <div class="card-header d-flex justify-content-between align-items-center">
                <div data-bs-toggle="collapse" data-bs-target="#clan-@groupKey" style="cursor:pointer; flex-grow: 1;">
                    <strong>@clanName</strong>
                    @if (clan != null)
                    {
                        <small class="text-muted ms-2">(@clan.WarTrophies trophies)</small>
                    }
                    <span class="badge bg-primary ms-2">@group.Count()</span>
                </div>

                <div style="flex-shrink: 0;">
                    <form method="post" asp-page-handler="UpdateInClanStatusForClan" style="display: inline;" class="update-inclan-form">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="clanId" value="@group.Key" />
                        <button type="submit" class="btn btn-sm btn-outline-warning"
                                title="Update IsInClan status for this clan only">
                            <i class="fas fa-sync-alt"></i> Update In-Clan
                        </button>
                    </form>
                </div>
            </div>

            <div id="clan-@groupKey" class="collapse show">
                <div class="table-responsive">
                    <table class="table table-sm mb-0 roster-table" data-clan-key="@groupKey">
                        <thead class="table-light">
                            <tr>
                                <th style="width:40px">#</th>
                                <th style="cursor: pointer;" onclick="sortRosterTable('@groupKey', 'tag')">
                                    Tag <i class="fas fa-sort" id="sort-icon-@groupKey-tag"></i>
                                </th>
                                <th style="cursor: pointer;" onclick="sortRosterTable('@groupKey', 'player')">
                                    Player <i class="fas fa-sort" id="sort-icon-@groupKey-player"></i>
                                </th>
                                <th style="width:220px">Assigned Clan</th>
                                <th style="width:90px; cursor: pointer;" onclick="sortRosterTable('@groupKey', 'inclan')">
                                    In Clan <i class="fas fa-sort" id="sort-icon-@groupKey-inclan"></i>
                                </th>
                                <th style="width:100px; cursor: pointer;" onclick="sortRosterTable('@groupKey', 'fame')">
                                    Fame / Atk <i class="fas fa-sort" id="sort-icon-@groupKey-fame"></i>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                var idx = 1;
                            }
                            @foreach (var roster in group.OrderByDescending(r => r.FameAttackAverage ?? 0))
                            {
                                var statusClass = string.Equals(roster.Status, "L2W", StringComparison.OrdinalIgnoreCase) ? "l2w-player" 
                                    : string.Equals(roster.Status, "Inactive", StringComparison.OrdinalIgnoreCase) ? "inactive-player" 
                                    : "active-player";
                                
                                <tr data-player-id="@roster.PlayerID" 
                                    data-roster-id="@roster.ID"
                                    data-player-tag="@roster.PlayerTag"
                                    data-player-name="@roster.PlayerName"
                                    data-player-status="@roster.Status"
                                    data-player-notes="@Html.Raw(Html.Encode(roster.Notes ?? ""))"
                                    data-in-clan="@roster.IsInClan.ToString().ToLower()"
                                    data-fame-avg="@((roster.FameAttackAverage ?? 0).ToString("F1"))"
                                    class="player-row @statusClass"
                                    onclick="handleRowClick(event, @roster.PlayerID, '@Html.Raw(Html.Encode(roster.PlayerName))', '@roster.PlayerTag', '@Html.Raw(Html.Encode(roster.Status ?? "Active"))', '@Html.Raw(Html.Encode(roster.Notes ?? ""))')"
                                    style="cursor: pointer;">
                                    <td>@idx</td>
                                    <td onclick="event.stopPropagation();">
                                        <a href="https://royaleapi.com/player/@roster.PlayerTag" target="_blank" class="text-decoration-none">
                                            <code>@roster.PlayerTag</code>
                                            <i class="fas fa-external-link-alt ms-1" style="font-size: 0.7em;"></i>
                                        </a>
                                    </td>
                                    <td>@roster.PlayerName</td>
                                    <td onclick="event.stopPropagation();">
                                        <select class="form-select form-select-sm assigned-clan" 
                                                data-roster-id="@roster.ID" 
                                                onchange="updateClanAssignment(@roster.ID, this.value)">
                                            <option value="">Unassigned</option>
                                            @foreach (var c in Model.Clans.OrderByDescending(c => c.WarTrophies))
                                            {
                                                <option value="@c.ID" selected="@(roster.ClanID.HasValue && roster.ClanID.Value == c.ID ? "selected" : null)">@c.Name</option>
                                            }
                                        </select>
                                    </td>
                                    <td class="text-center">
                                        @if (roster.IsInClan)
                                        {
                                            <i class="fas fa-check-circle text-success" title="Player is in assigned clan"></i>
                                        }
                                        else
                                        {
                                            <i class="fas fa-times-circle text-danger" title="Player is NOT in assigned clan"></i>
                                        }
                                        <!-- Hidden checkbox to maintain data attribute for sorting -->
                                        <input type="checkbox" class="in-clan-status d-none" data-roster-id="@roster.ID" @(roster.IsInClan ? "checked" : "") disabled />
                                    </td>
                                    <td class="text-center">
                                        <strong class="@((roster.FameAttackAverage ?? 0) >= 200 ? "text-success" : (roster.FameAttackAverage ?? 0) >= 175 ? "text-warning" : "text-danger")">
                                            @((roster.FameAttackAverage ?? 0).ToString("F1"))
                                        </strong>
                                    </td>
                                </tr>
                                idx++;
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>

<!-- Auto Roster Modal -->
<div class="modal fade" id="autoRosterModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-magic"></i> Auto Roster Options
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-4">
                    <h6>Choose Auto Roster Type:</h6>
                    <p class="text-muted">Select an option to automatically create roster assignments.</p>
                </div>
                <div class="d-grid gap-3">
                    <div class="card border-primary">
                        <div class="card-body">
                            <h6 class="card-title">
                                <i class="fas fa-sort-amount-down text-primary"></i> Create Roster by Fame Attack Average
                            </h6>
                            <p class="card-text text-muted mb-3">
                                Automatically assigns players to clans based on their <strong>fame attack average</strong>, with the highest performers assigned to higher trophy clans.
                            </p>
                            <form method="post" asp-page-handler="UpdateRosterByFameAverage" style="display: inline;">
                                @Html.AntiForgeryToken()
                                <button type="submit" class="btn btn-primary w-100" onclick="return confirmAutoRoster('fameAverage')">
                                    <i class="fas fa-magic"></i> Create Roster by Fame Average
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    Cancel
                </button>
            </div>
        </div>
    </div>
</div>

<partial name="_PlayerActionsModal" />

@section Scripts {
    <!-- Include shared modal scripts and styles -->
    <link rel="stylesheet" href="~/css/player-actions-modal.css" />
    <link rel="stylesheet" href="~/css/player-status-styles.css" />
    <script src="~/js/player-actions-modal.js"></script>
    <script>
        let rosterSortDirection = {}; // Track sort direction per clan table

        // Handle row clicks - don't open modal if clicking on interactive elements
        function handleRowClick(event, playerId, playerName, playerTag, playerStatus, playerNotes) {
            // Don't open modal if clicking on select dropdown or links
            if (event.target.closest('select') || event.target.closest('a')) {
                return;
            }
            selectPlayer(playerId, playerName, playerTag, playerStatus, playerNotes);
        }

        function updateWeekIndexAndSubmit(selectedSeasonId) {
            const select = document.getElementById('seasonWeekSelect');
            const selectedOption = select.options[select.selectedIndex];
            const weekIndex = selectedOption.getAttribute('data-week-index');
            document.getElementById('selectedWeekIndexInput').value = weekIndex;
            select.form.submit();
        }

        // Basic client-side filtering
        document.getElementById('searchInput').addEventListener('input', function () {
            const q = this.value.toLowerCase();
            document.querySelectorAll('#rosterContainer tbody tr').forEach(tr => {
                const name = tr.children[2].textContent.toLowerCase(); // Player name column
                const tag = tr.children[1].textContent.toLowerCase();  // Tag column
                tr.style.display = (name.includes(q) || tag.includes(q)) ? '' : 'none';
            });
            updateAllRowNumbers();
        });

        document.getElementById('unassignedOnly').addEventListener('change', function () {
            const showOnlyUnassigned = this.checked;
            document.querySelectorAll('#rosterContainer tbody tr').forEach(tr => {
                const sel = tr.querySelector('select.assigned-clan');
                if (showOnlyUnassigned) {
                    tr.style.display = (sel && sel.value === '') ? '' : 'none';
                } else {
                    tr.style.display = '';
                }
            });
            updateAllRowNumbers();
        });

        function sortRosterTable(clanKey, column) {
            const table = document.querySelector(`.roster-table[data-clan-key="${clanKey}"]`);
            if (!table) return;

            const tbody = table.tBodies[0];
            const rows = Array.from(tbody.rows);
        
            // Initialize sort direction for this clan/column combination
            const sortKey = `${clanKey}-${column}`;
            if (!rosterSortDirection[sortKey]) {
                rosterSortDirection[sortKey] = 'asc';
            }
        
            const isAscending = rosterSortDirection[sortKey] === 'asc';
            rosterSortDirection[sortKey] = isAscending ? 'desc' : 'asc';

            rows.sort((a, b) => {
                let aVal, bVal;

                switch(column) {
                    case 'tag':
                        aVal = a.getAttribute('data-player-tag') || '';
                        bVal = b.getAttribute('data-player-tag') || '';
                        break;
                    case 'player':
                        aVal = a.getAttribute('data-player-name') || '';
                        bVal = b.getAttribute('data-player-name') || '';
                        break;
                    case 'inclan':
                        aVal = a.getAttribute('data-in-clan') === 'true' ? 1 : 0;
                        bVal = b.getAttribute('data-in-clan') === 'true' ? 1 : 0;
                        return isAscending ? aVal - bVal : bVal - aVal;
                    case 'fame':
                        aVal = parseFloat(a.getAttribute('data-fame-avg')) || 0;
                        bVal = parseFloat(b.getAttribute('data-fame-avg')) || 0;
                        return isAscending ? aVal - bVal : bVal - aVal;
                    default:
                        return 0;
                }

                return isAscending ? aVal.localeCompare(bVal) : bVal.localeCompare(aVal);
            });

            // Re-append sorted rows
            rows.forEach(row => tbody.appendChild(row));

            // Update row numbers for this table
            updateRowNumbers(clanKey);

            // Update sort indicators
            updateSortIndicators(clanKey, column, !isAscending);
        }

        function updateRowNumbers(clanKey) {
            const table = document.querySelector(`.roster-table[data-clan-key="${clanKey}"]`);
            if (!table) return;

            const visibleRows = Array.from(table.querySelectorAll('tbody tr')).filter(row => 
                row.style.display !== 'none'
            );
        
            visibleRows.forEach((row, index) => {
                const firstCell = row.cells[0];
                if (firstCell) {
                    firstCell.textContent = index + 1;
                }
            });
        }

        function updateAllRowNumbers() {
            document.querySelectorAll('.roster-table').forEach(table => {
                const clanKey = table.getAttribute('data-clan-key');
                if (clanKey) {
                    updateRowNumbers(clanKey);
                }
            });
        }

        function updateSortIndicators(clanKey, activeColumn, isDescending) {
            // Reset all sort icons for this clan
            document.querySelectorAll(`#sort-icon-${clanKey}-tag, #sort-icon-${clanKey}-player, #sort-icon-${clanKey}-inclan, #sort-icon-${clanKey}-fame`).forEach(icon => {
                icon.className = 'fas fa-sort';
            });

            // Update the active column's icon
            const activeIcon = document.getElementById(`sort-icon-${clanKey}-${activeColumn}`);
            if (activeIcon) {
                activeIcon.className = `fas fa-sort-${isDescending ? 'down' : 'up'}`;
            }
        }

        function getAntiForgeryToken() {
            const t = document.querySelector('input[name="__RequestVerificationToken"]');
            return t ? t.value : '';
        }

        function showAutoRosterModal() {
            var modal = new bootstrap.Modal(document.getElementById('autoRosterModal'));
            modal.show();
        }

        function confirmAutoRoster(type) {
            const messages = {
                'fameAverage': 'This will automatically assign all players to clans based on their fame attack average. Existing assignments will be overwritten. Continue?'
            };

            return confirm(messages[type]);
        }

        async function updateClanAssignment(rosterId, clanId) {
            const selectElement = document.querySelector(`select.assigned-clan[data-roster-id="${rosterId}"]`);
            const originalValue = selectElement.getAttribute('data-original-value') || selectElement.value;
        
            // Store original value for rollback if needed
            if (!selectElement.hasAttribute('data-original-value')) {
                selectElement.setAttribute('data-original-value', originalValue);
            }

            // Show loading state
            selectElement.disabled = true;
            selectElement.style.opacity = '0.6';

            const assignedClanId = clanId || null;
            const payload = { id: rosterId, assignedClanId: assignedClanId };

            try {
                const resp = await fetch('?handler=UpdateRow', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getAntiForgeryToken()
                    },
                    body: JSON.stringify(payload)
                });
                const json = await resp.json();
            
                if (resp.ok && json.success) {
                    // Update successful - update the original value
                    selectElement.setAttribute('data-original-value', clanId);
                
                    // Show brief success indication
                    selectElement.style.borderColor = '#28a745';
                    setTimeout(() => {
                        selectElement.style.borderColor = '';
                    }, 1000);
                
                    // Reload page to reflect changes (including InClan status, player movement between clans, etc.)
                    setTimeout(() => {
                        location.reload();
                    }, 500);
                } else {
                    // Revert to original value on failure
                    selectElement.value = originalValue;
                    selectElement.style.borderColor = '#dc3545';
                    alert(json?.message ?? 'Failed to update clan assignment');
                
                    setTimeout(() => {
                        selectElement.style.borderColor = '';
                    }, 2000);
                }
            } catch (err) {
                console.error(err);
                // Revert to original value on error
                selectElement.value = originalValue;
                selectElement.style.borderColor = '#dc3545';
                alert('Error updating clan assignment');
            
                setTimeout(() => {
                    selectElement.style.borderColor = '';
                }, 2000);
            } finally {
                selectElement.disabled = false;
                selectElement.style.opacity = '1';
            }
        }

        async function copyPreviousWeek() {
            if (!confirm('Copy previous week roster into current week?')) return;
            try {
                const resp = await fetch('?handler=CopyPreviousWeek', {
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': getAntiForgeryToken()
                    }
                });
                const json = await resp.json();
                if (resp.ok && json.success) {
                    alert('Copied previous week');
                    location.reload();
                } else {
                    alert(json?.message ?? 'Copy previous week failed');
                }
            } catch (err) {
                console.error(err);
                alert('Error copying previous week');
            }
        }

        // Initialize row numbers and default sort on page load
        document.addEventListener('DOMContentLoaded', function() {
            // INITIALIZE THE SHARED MODAL
            initializePlayerActionsModal({
                canModifyPlayerData: @(Model.CanModifyPlayerData ? "true" : "false"),
                handlerPrefix: '/Rosters'  // Rosters page handler prefix
            });

            updateAllRowNumbers();

            // Initialize default sort state for fame column (descending) for all tables
            document.querySelectorAll('.roster-table').forEach(table => {
                const clanKey = table.getAttribute('data-clan-key');
                if (clanKey) {
                    // Set initial sort direction for fame column to descending
                    rosterSortDirection[`${clanKey}-fame`] = 'desc';

                    // Update the sort indicator to show descending
                    updateSortIndicators(clanKey, 'fame', true); // true = descending
                }
            });
        });
    </script>

<style>
    /* Make table header text smaller to fit on one line */
    .roster-table thead th {
        font-size: 0.875rem; /* Slightly smaller than default */
        font-weight: 600;
        white-space: nowrap; /* Prevent text wrapping */
    }

    /* Ensure sort icons are proportionally sized */
    .roster-table thead th i {
        font-size: 0.75rem;
    }

    /* In-Clan status icons */
    .roster-table tbody td i.fa-check-circle,
    .roster-table tbody td i.fa-times-circle {
        font-size: 1.2rem;
        cursor: help;
    }

    .roster-table tbody td i.fa-check-circle {
        color: #28a745 !important; /* Bootstrap success green */
    }

    .roster-table tbody td i.fa-times-circle {
        color: #dc3545 !important; /* Bootstrap danger red */
    }

    /* Status-based row highlighting */
    .roster-table tbody tr.inactive-player {
        background-color: #f8d7da; /* Light red background for Inactive */
    }

    .roster-table tbody tr.l2w-player {
        background-color: #d1e7dd; /* Light green background for L2W */
    }
</style>
}