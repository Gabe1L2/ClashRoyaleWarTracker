@* @page
@model ClashRoyaleWarTracker.Web.Pages.IndexModel
@{
    ViewData["Title"] = "War History";
    Layout = "~/Pages/Shared/_FullWidthLayout.cshtml";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="display-4">War History Spreadsheet</h1>
    <div>
        @if (Model.CanManageClans)
        {
            <button class="btn btn-info" onclick="showManageClansModal()">
                <i class="fas fa-cogs"></i> Manage Clans
            </button>
        }
        @if (Model.CanUpdateWarData)
        {
            <button class="btn btn-success" onclick="showUpdateDataModal()">
                <i class="fas fa-calendar-week"></i> Update Data
            </button>
        }
        <button class="btn btn-primary" onclick="refreshData()">
            <i class="fas fa-sync-alt"></i> Refresh Data
        </button>
    </div>
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<!-- Filter Controls -->
<div class="card mb-4">
    <div class="card-body">
        <div class="row g-3">
            <div class="col-md-2">
                <label class="form-label">Trophy Level</label>
                <form method="post" asp-page-handler="ToggleTrophyLevel" style="display: inline;">
                    <div class="btn-group w-100" role="group">
                        <input type="radio" class="btn-check" name="Is5kTrophies" id="trophy5k" value="true" 
                               @(Model.Is5kTrophies ? "checked" : "") onchange="this.form.submit()">
                        <label class="btn btn-outline-success" for="trophy5k">5k+</label>

                        <input type="radio" class="btn-check" name="Is5kTrophies" id="tropySub5k" value="false" 
                               @(!Model.Is5kTrophies ? "checked" : "") onchange="this.form.submit()">
                        <label class="btn btn-outline-warning" for="tropySub5k">Sub-5k</label>
                    </div>
                </form>
            </div>
            <div class="col-md-2">
                <label class="form-label">Clans</label>
                <div class="dropdown">
                    <button class="btn btn-outline-secondary dropdown-toggle w-100 text-start" type="button" id="clanFilterDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                        <span id="clanFilterText">All Clans</span>
                    </button>
                    <ul class="dropdown-menu w-100" aria-labelledby="clanFilterDropdown" style="max-height: 250px; overflow-y: auto;">
                        <li>
                            <label class="dropdown-item">
                                <input type="checkbox" id="selectAllClans" onchange="toggleAllClans()" class="me-2" checked>
                                <strong>Select All</strong>
                            </label>
                        </li>
                        <li><hr class="dropdown-divider"></li>
                        @foreach (var clan in Model.AllClans)
                        {
                            <li>
                                <label class="dropdown-item">
                                    <input type="checkbox" class="clan-checkbox me-2" value="@clan.Name" onchange="updateClanFilter()" checked>
                                    @clan.Name
                                </label>
                            </li>
                        }
                        @if (!Model.AllClans.Any())
                        {
                            <li>
                                <span class="dropdown-item text-muted">No clans available</span>
                            </li>
                        }
                    </ul>
                </div>
            </div>
            <div class="col-md-2">
                <label class="form-label">Status</label>
                <div class="dropdown">
                    <button class="btn btn-outline-secondary dropdown-toggle w-100 text-start" type="button" id="statusFilterDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                        <span id="statusFilterText">All Statuses</span>
                    </button>
                    <ul class="dropdown-menu w-100" aria-labelledby="statusFilterDropdown" style="max-height: 250px; overflow-y: auto;">
                        <li>
                            <label class="dropdown-item">
                                <input type="checkbox" id="selectAllStatuses" onchange="toggleAllStatuses()" class="me-2" checked>
                                <strong>Select All</strong>
                            </label>
                        </li>
                        <li><hr class="dropdown-divider"></li>
                        @foreach (var status in Model.AllStatuses)
                        {
                            <li>
                                <label class="dropdown-item">
                                    <input type="checkbox" class="status-checkbox me-2" value="@status" onchange="updateStatusFilter()" checked>
                                    @status
                                </label>
                            </li>
                        }
                        @if (!Model.AllStatuses.Any())
                        {
                            <li>
                                <span class="dropdown-item text-muted">No Statuses available</span>
                            </li>
                        }
                    </ul>
                </div>
            </div>
            <div class="col-md-4">
                <label class="form-label">Search Player</label>
                <input type="text" id="searchInput" class="form-control" placeholder="Search by name or tag..." onkeyup="filterTable()">
            </div>
            <div class="col-md-2">
                <label class="form-label">&nbsp;</label>
                <button class="btn btn-outline-secondary w-100" onclick="clearFilters()">Clear Filters</button>
            </div>
        </div>
    </div>
</div>

<!-- Full Width Spreadsheet Table -->
@if (Model.PlayerRows.Any())
{
    <div class="table-responsive" style="max-height: 75vh; overflow: auto; border: 1px solid #dee2e6;">
        <table id="warHistoryTable" class="table table-sm mb-0">
            <thead class="table-dark sticky-top">
                <tr>
                    <!-- NEW: Row number column -->
                    <th style="position: sticky; left: 0; background-color: var(--bs-dark); z-index: 10; min-width: 50px;">
                        <div style="cursor: default; text-align: center;">
                            #
                        </div>
                    </th>
                    <!-- Fixed columns for player info - UPDATED POSITIONS -->
                    <th style="position: sticky; left: 50px; background-color: var(--bs-dark); z-index: 10; min-width: 90px;">
                        <div onclick="sortTable('tag')" style="cursor: pointer;">
                            Tag <i class="fas fa-sort"></i>
                        </div>
                    </th>
                    <th style="position: sticky; left: 140px; background-color: var(--bs-dark); z-index: 10; min-width: 120px;">
                        <div onclick="sortTable('player')" style="cursor: pointer;">
                            Player <i class="fas fa-sort"></i>
                        </div>
                    </th>
                    <th style="position: sticky; left: 260px; background-color: var(--bs-dark); z-index: 10; min-width: 100px;">
                        <div onclick="sortTable('clan')" style="cursor: pointer;">
                            Last Clan <i class="fas fa-sort"></i>
                        </div>
                    </th>
                    <th style="position: sticky; left: 360px; background-color: var(--bs-dark); z-index: 10; min-width: 80px;">
                        <div onclick="sortTable('status')" style="cursor: pointer; text-align: center;">
                            Fame / Atk. <i class="fas fa-sort"></i>
                        </div>
                    </th>
                    
                    <!-- Dynamic columns for each season/week -->
                    @foreach (var seasonWeek in Model.SeasonWeekHeaders)
                    {
                        var parts = seasonWeek.Split('-');
                        var season = parts[0];
                        var week = parts[1];
                        <th class="text-center season-week-column" data-season-week="@seasonWeek" style="min-width: 85px; text-align: center;">
                            <div style="white-space: nowrap;">
                                @season-@week
                            </div>
                        </th>
                    }
                </tr>
            </thead>
            <tbody>
                @{
                    var rowNumber = 1;
                }
                @foreach (var row in Model.PlayerRows)
                {
                    <tr data-player-name="@row.PlayerName.ToLower()" 
                        data-player-tag="@row.PlayerTag.ToLower()" 
                        data-clan-name="@row.ClanName" 
                        data-status="@(row.Status ?? "Inactive")"
                        data-original-index="@rowNumber"
                        data-player-id="@row.PlayerID"
                        onclick="selectPlayer(@row.PlayerID, '@Html.Raw(Html.Encode(row.PlayerName))', '@row.PlayerTag')"
                        style="cursor: pointer;"
                        class="@(string.Equals(row.Status, "L2W", System.StringComparison.OrdinalIgnoreCase) ? "l2w-player" : 
                                (!string.Equals(row.Status, "Active", System.StringComparison.OrdinalIgnoreCase) ? "inactive-player" : ""))">
        
        <!-- NEW: Row number column -->
        <td style="position: sticky; left: 0; z-index: 5;" class="row-number @(string.Equals(row.Status, "L2W", System.StringComparison.OrdinalIgnoreCase) ? "l2w-player" : 
            (!string.Equals(row.Status, "Active", System.StringComparison.OrdinalIgnoreCase) ? "inactive-player" : ""))">
            <strong class="text-muted">@rowNumber</strong>
        </td>
        <!-- Tag column -->
        <td style="position: sticky; left: 50px; z-index: 5;" class="@(string.Equals(row.Status, "L2W", System.StringComparison.OrdinalIgnoreCase) ? "l2w-player" : 
            (!string.Equals(row.Status, "Active", System.StringComparison.OrdinalIgnoreCase) ? "inactive-player" : ""))">
            <a href="https://royaleapi.com/player/@row.PlayerTag" target="_blank" class="text-decoration-none" onclick="event.stopPropagation();">
                <code>@row.PlayerTag</code>
                <i class="fas fa-external-link-alt ms-1" style="font-size: 0.7em;"></i>
            </a>
        </td>

        <!-- Player name column -->
        <td style="position: sticky; left: 140px; z-index: 5;" class="@(string.Equals(row.Status, "L2W", System.StringComparison.OrdinalIgnoreCase) ? "l2w-player" : 
            (!string.Equals(row.Status, "Active", System.StringComparison.OrdinalIgnoreCase) ? "inactive-player" : ""))">
            <strong>@row.PlayerName</strong>
        </td>

        <!-- Clan column -->
        <td style="position: sticky; left: 260px; z-index: 5;" class="@(string.Equals(row.Status, "L2W", System.StringComparison.OrdinalIgnoreCase) ? "l2w-player" : 
            (!string.Equals(row.Status, "Active", System.StringComparison.OrdinalIgnoreCase) ? "inactive-player" : ""))">
            <strong>@row.ClanName</strong>
        </td>

        <!-- Fame/Atk column -->
        <td style="position: sticky; left: 360px; z-index: 5; text-align: center" class="@(string.Equals(row.Status, "L2W", System.StringComparison.OrdinalIgnoreCase) ? "l2w-player" : 
            (!string.Equals(row.Status, "Active", System.StringComparison.OrdinalIgnoreCase) ? "inactive-player" : ""))">
            @{
                // Use PlayerAverage from database instead of calculating on-the-fly
                var playerAverage = Model.PlayerAverages.ContainsKey(row.PlayerID)
                ? Model.PlayerAverages[row.PlayerID]
                : null;

                var average = playerAverage?.FameAttackAverage ?? 0;
            }
            <strong class="text-center text-@(average >= 200 ? "success" : average >= 175 ? "custom-orange" : "dark-red")"
                    data-sort-value="@average.ToString("F1")">
                @average.ToString("F1")
            </strong>
        </td>
        
        <!-- Dynamic columns for each season/week -->
        @foreach (var seasonWeek in Model.SeasonWeekHeaders)
        {
            var cell = row.WarData.ContainsKey(seasonWeek) ? row.WarData[seasonWeek] : new PlayerWarDataCell();
            <td class="text-center season-week-column" data-season-week="@seasonWeek">
                @if (cell.HasData)
                {
                    var ratio = cell.DecksUsed > 0 ? (decimal)cell.Fame / cell.DecksUsed : 0;
                    var colorClass = ratio >= 200 ? "success" : ratio >= 175 ? "custom-orange" : "dark-red";

                    <div class="war-cell" 
                         data-bs-toggle="tooltip" 
                         title="Fame: @cell.Fame, Attacks: @cell.DecksUsed, Ratio: @ratio.ToString("F1")">
                        <div class="fame-value text-@colorClass">
                            @cell.Fame
                        </div>
                        <div class="attacks-value text-muted" style="font-size: 0.8em;">
                            @cell.DecksUsed
                        </div>
                    </div>
                }
                else
                {
                    <span class="text-muted">-</span>
                }
            </td>
        }
    </tr>
    rowNumber++;
}
            </tbody>
        </table>
    </div>
}
else
{
    <div class="text-center py-5">
        <i class="fas fa-chart-line fa-3x text-muted mb-3"></i>
        <h5 class="text-muted">No war history data available</h5>
        <p class="text-muted">Run a data update to populate war history information.</p>
    </div>
}

<!-- Player Actions Modal -->
<div class="modal fade" id="playerActionsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Player Actions</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <h6 id="selectedPlayerName">Player Name</h6>
                <p class="text-muted" id="selectedPlayerTag">
                    <span>Tag: </span>
                    <a id="playerTagLink" href="#" target="_blank" class="text-decoration-none">
                        <span id="playerTagText"></span>
                        <i class="fas fa-external-link-alt ms-1" style="font-size: 0.8em;"></i>
                    </a>
                </p>

                <!-- Tab Navigation -->
                <ul class="nav nav-tabs mb-3" id="playerActionTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="status-tab" data-bs-toggle="tab" data-bs-target="#status-pane" type="button" role="tab">
                            <i class="fas fa-user-check me-2"></i>Status
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="history-tab" data-bs-toggle="tab" data-bs-target="#history-pane" type="button" role="tab" onclick="loadPlayerWarHistories()">
                            <i class="fas fa-history me-2"></i>War History
                        </button>
                    </li>
                </ul>

                <!-- Tab Content -->
                <div class="tab-content" id="playerActionTabContent">
                    <!-- Status Tab -->
                    <div class="tab-pane fade show active" id="status-pane" role="tabpanel">
                        @if (Model.CanModifyPlayerData)
                        {
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <label class="form-label">Player Status</label>
                                    <select id="playerStatusSelect" class="form-select">
                                        <option value="Active">Active</option>
                                        <option value="Inactive">Inactive</option>
                                        <option value="L2W">L2W</option>
                                    </select>
                                </div>
                                <div class="col-md-6 d-flex align-items-end">
                                    <button class="btn btn-primary w-100" onclick="updatePlayerStatus()">
                                        <i class="fas fa-save"></i> Update Status
                                    </button>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-warning">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                You don't have permission to modify player data.
                            </div>
                        }
                    </div>

                    <!-- War History Tab -->
                    <div class="tab-pane fade" id="history-pane" role="tabpanel">
                        <div id="warHistoryLoading" class="text-center py-3 d-none">
                            <i class="fas fa-spinner fa-spin"></i> Loading war histories...
                        </div>
                        <div id="warHistoryContent">
                            <!-- War history will be loaded dynamically -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="editWarHistoryModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="editWarHistoryForm" onsubmit="return false;">
                <div class="modal-header">
                    <h5 class="modal-title">Edit War History</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="editWarHistoryId" />

                    <div class="mb-3">
                        <label for="editFame" class="form-label">Fame</label>
                        <input type="number" id="editFame" class="form-control" min="0" max="3600" step="1" required />
                    </div>

                    <div class="mb-3">
                        <label for="editDecksUsed" class="form-label">Attacks (Decks Used)</label>
                        <input type="number" id="editDecksUsed" class="form-control" min="0" max="16" step="1" required />
                    </div>

                    <div class="mb-3">
                        <label for="editBoatAttacks" class="form-label">Boat Attacks</label>
                        <input type="number" id="editBoatAttacks" class="form-control" min="0" max="3600" step="1" required />
                    </div>

                    <div id="editWarHistoryError" class="alert alert-danger d-none" role="alert"></div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button id="saveWarHistoryBtn" type="button" class="btn btn-primary" onclick="saveWarHistoryFromModal()">
                        <i class="fas fa-save"></i> Save
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Update Data Modal -->
<div class="modal fade" id="updateDataModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-database"></i> Update Data Options
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-4">
                    <h6>Choose Update Type:</h6>
                    <p class="text-muted">Select how much data you want to update for all clans.</p>
                </div>

                <div class="d-grid gap-3">
                    <div class="card border-primary">
                        <div class="card-body">
                            <h6 class="card-title">
                                <i class="fas fa-calendar-week text-primary"></i> Weekly Update
                            </h6>
                            <p class="card-text text-muted mb-3">
                                Updates clan data and fetches the <strong>last week</strong> of clan war data for all clans.
                            </p>
                            <form method="post" asp-page-handler="WeeklyUpdate" style="display: inline;">
                                <button type="submit" class="btn btn-primary w-100" onclick="return confirmUpdate('weekly')">
                                    <i class="fas fa-calendar-week"></i> Run Weekly Update
                                </button>
                            </form>
                        </div>
                    </div>

                    <div class="card border-warning">
                        <div class="card-body">
                            <h6 class="card-title">
                                <i class="fas fa-history text-warning"></i> Update Backlog
                            </h6>
                            <p class="card-text text-muted mb-3">
                                Updates clan data and fetches the <strong>last 10 weeks</strong> of clan war data for all clans. This will take longer.
                            </p>
                            <form method="post" asp-page-handler="BacklogUpdate" style="display: inline;">
                                <button type="submit" class="btn btn-warning w-100" onclick="return confirmUpdate('backlog')">
                                    <i class="fas fa-history"></i> Run Backlog Update
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    Cancel
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Manage Clans Modal (Admins only) -->
<div class="modal fade" id="manageClansModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-cogs"></i> Manage Clans
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <!-- Navigation Tabs -->
                <ul class="nav nav-tabs mb-4" id="clanManagementTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="add-clan-tab" data-bs-toggle="tab" data-bs-target="#add-clan" type="button" role="tab">
                            <i class="fas fa-plus me-2"></i>Add Clan
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="delete-clan-tab" data-bs-toggle="tab" data-bs-target="#delete-clan" type="button" role="tab">
                            <i class="fas fa-trash me-2"></i>Delete Clan
                        </button>
                    </li>
                </ul>

                <!-- Tab Content -->
                <div class="tab-content" id="clanManagementTabContent">

                    <!-- Add Clan Tab -->
                    <div class="tab-pane fade show active" id="add-clan" role="tabpanel">
                        <form method="post" asp-page-handler="AddClan" onsubmit="return validateClanTag()">
                            <div class="mb-3">
                                <label for="clanTagInput" class="form-label">
                                    <i class="fas fa-tag me-2"></i>Clan Tag
                                </label>
                                <div class="input-group">
                                    <span class="input-group-text">#</span>
                                    <input type="text"
                                           class="form-control"
                                           id="clanTagInput"
                                           name="ClanTag"
                                           placeholder="Enter clan tag (without #)"
                                           required
                                           maxlength="32"
                                           pattern="[A-Za-z0-9]+"
                                           title="Clan tag should only contain letters and numbers">
                                </div>
                                <div class="form-text">
                                    <i class="fas fa-info-circle me-1"></i>
                                    Enter the clan tag without the # symbol. Example: 2Y9LPQG8
                                </div>
                                <div id="clanTagError" class="text-danger d-none"></div>
                            </div>
                            <div class="d-grid">
                                <button type="submit" class="btn btn-success" id="addClanSubmitBtn">
                                    <i class="fas fa-plus"></i> Add Clan
                                </button>
                            </div>
                        </form>
                    </div>

                    <!-- Delete Clan Tab -->
                    <div class="tab-pane fade" id="delete-clan" role="tabpanel">
                        <form method="post" asp-page-handler="DeleteClan" onsubmit="return confirmDeleteClan()">
                            <div class="mb-3">
                                <label for="deleteClanSelect" class="form-label">
                                    <i class="fas fa-exclamation-triangle me-2 text-warning"></i>Select Clan to Delete
                                </label>
                                <select class="form-select" id="deleteClanSelect" name="ClanTag" required>
                                    <option value="">Choose a clan to delete...</option>
                                    @foreach (var clan in Model.AllClans)
                                    {
                                        <option value="@clan.Tag" data-clan-name="@clan.Name">
                                            @clan.Name (#@clan.Tag) - @clan.WarTrophies trophies
                                        </option>
                                    }
                                </select>
                                @if (!Model.AllClans.Any())
                                {
                                    <div class="text-muted mt-2">
                                        <i class="fas fa-info-circle me-1"></i>No clans available to delete
                                    </div>
                                }
                            </div>

                            @if (Model.AllClans.Any())
                            {
                                <div class="alert alert-warning" role="alert">
                                    <i class="fas fa-exclamation-triangle me-2"></i>
                                    <strong>Warning:</strong> Deleting a clan will permanently remove all associated data including player war histories and statistics. This action cannot be undone.
                                </div>

                                <div class="d-grid">
                                    <button type="submit" class="btn btn-danger" id="deleteClanSubmitBtn" disabled>
                                        <i class="fas fa-trash"></i> Delete Selected Clan
                                    </button>
                                </div>
                            }
                        </form>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times"></i> Close
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let sortDirection = {};
        let selectedStatuses = new Set();
        let selectedClans = new Set();
        let selectedPlayerId = null;
        let selectedPlayerName = '';
        let selectedPlayerTag = '';
        let warHistoryWasEdited = false;

        // User permissions
        const canModifyPlayerData = @Model.CanModifyPlayerData.ToString().ToLower();

        function selectPlayer(playerId, playerName, playerTag) {
            selectedPlayerId = playerId;
            selectedPlayerName = playerName;
            selectedPlayerTag = playerTag;

            warHistoryWasEdited = false;
            
            document.getElementById('selectedPlayerName').textContent = playerName;
            document.getElementById('playerTagText').textContent = `#${playerTag}`;
            document.getElementById('playerTagLink').href = `https://royaleapi.com/player/${playerTag}`;

            const clickedRow = document.querySelector(`tr[data-player-id="${playerId}"]`);
            const currentStatus = clickedRow ? clickedRow.getAttribute('data-status') : 'Active';

            // Set the status dropdown to the current player's status
            const statusSelect = document.getElementById('playerStatusSelect');
            if (statusSelect) {
                // Normalize the status value to match the option values
                let normalizedStatus = currentStatus;
                if (currentStatus === 'Inactive') {
                    normalizedStatus = 'Inactive';
                } else if (currentStatus === 'L2W') {
                    normalizedStatus = 'L2W';
                } else {
                    normalizedStatus = 'Active'; // Default fallback
                }
                statusSelect.value = normalizedStatus;
            }

            // Reset tabs to status tab
            const statusTab = document.getElementById('status-tab');
            const historyTab = document.getElementById('history-tab');
            const statusPane = document.getElementById('status-pane');
            const historyPane = document.getElementById('history-pane');

            statusTab.classList.add('active');
            historyTab.classList.remove('active');
            statusPane.classList.add('show', 'active');
            historyPane.classList.remove('show', 'active');

            var modal = new bootstrap.Modal(document.getElementById('playerActionsModal'));
            modal.show();
        }

        async function updatePlayerStatus() {
            const status = document.getElementById('playerStatusSelect').value;
            
            try {
                const response = await fetch('/WarHistories?handler=UpdatePlayerStatus', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: `playerId=${selectedPlayerId}&status=${encodeURIComponent(status)}`
                });

                if (response.ok) {
                    location.reload(); // Reload to show updated status
                } else {
                    alert('Error updating player status');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error updating player status');
            }
        }

        async function loadPlayerWarHistories() {
            const loadingDiv = document.getElementById('warHistoryLoading');
            const contentDiv = document.getElementById('warHistoryContent');
            
            loadingDiv.classList.remove('d-none');
            contentDiv.innerHTML = '';

            try {
                const response = await fetch(`/WarHistories?handler=PlayerWarHistories&playerId=${selectedPlayerId}`);
                const result = await response.json();

                if (result.success) {
                    displayWarHistories(result.data);
                } else {
                    contentDiv.innerHTML = `<div class="alert alert-danger">${result.message}</div>`;
                }
            } catch (error) {
                console.error('Error:', error);
                contentDiv.innerHTML = '<div class="alert alert-danger">Error loading war histories</div>';
            } finally {
                loadingDiv.classList.add('d-none');
            }
        }

        function displayWarHistories(warHistories) {
            const contentDiv = document.getElementById('warHistoryContent');
            
            if (!warHistories || warHistories.length === 0) {
                contentDiv.innerHTML = '<div class="alert alert-info">No war history found for this player.</div>';
                return;
            }

            let html = `
                <div class="table-responsive" style="max-height: 400px; overflow-y: auto;">
                    <table class="table table-sm table-striped">
                        <thead class="table-dark sticky-top">
                            <tr>
                                <th>Season</th>
                                <th>Week</th>
                                <th>Clan</th>
                                <th>Fame</th>
                                <th>Attacks</th>
                                <th>Boat Attacks</th>
                                <th>Fame/Attack</th>
                                ${canModifyPlayerData ? '<th>Actions</th>' : ''}
                            </tr>
                        </thead>
                        <tbody>
            `;

            warHistories.forEach(history => {
                const ratio = history.decksUsed > 0 ? (history.fame / history.decksUsed).toFixed(1) : '0.0';
                const ratioColor = ratio >= 200 ? 'success' : ratio >= 175 ? 'warning' : 'danger';
                
                html += `
                    <tr data-war-history-id="${history.id}">
                        <td>${history.seasonID}</td>
                        <td>${history.weekIndex}</td>
                        <td>${history.clanName}</td>
                        <td><span class="fw-bold">${history.fame}</span></td>
                        <td><span class="fw-bold">${history.decksUsed}</span></td>
                        <td><span class="fw-bold">${history.boatAttacks}</span></td>
                        <td><span class="badge bg-${ratioColor}">${ratio}</span></td>
                        ${canModifyPlayerData ? `<td><button class="btn btn-sm btn-outline-primary" onclick="editWarHistory(${history.id}, ${history.fame}, ${history.decksUsed}, ${history.boatAttacks}, ${history.seasonID}, ${history.weekIndex})"><i class="fas fa-edit"></i></button></td>` : ''}
                    </tr>
                `;
            });

            html += `
                        </tbody>
                    </table>
                </div>
            `;

            contentDiv.innerHTML = html;
        }

        function editWarHistory(warHistoryId, currentFame, currentDecks, currentBoats, seasonID, weekIndex) {
            // Prefill modal fields
            document.getElementById('editWarHistoryId').value = warHistoryId;
            document.getElementById('editFame').value = Number(currentFame) ?? 0;
            document.getElementById('editDecksUsed').value = Number(currentDecks) ?? 0;
            document.getElementById('editBoatAttacks').value = Number(currentBoats) ?? 0;
            document.getElementById('editWarHistoryError').classList.add('d-none');
            document.getElementById('editWarHistoryError').textContent = '';

            const modalTitle = document.querySelector('#editWarHistoryModal .modal-title');
            modalTitle.textContent = `Edit War History - ${seasonID}-${weekIndex}`;

            const playerActionsEl = document.getElementById('playerActionsModal');
            const editEl = document.getElementById('editWarHistoryModal');

            // Fade the Player Actions modal
            if (playerActionsEl) {
                playerActionsEl.classList.add('faded-behind');
            }

            // Create edit modal instance with no backdrop so page isn't dimmed
            const editModal = new bootstrap.Modal(editEl, { backdrop: false, keyboard: true });
            editModal.show();

            // When edit modal hides, remove faded class from player actions modal
            const onHidden = () => {
                if (playerActionsEl) {
                    playerActionsEl.classList.remove('faded-behind');
                }
                editEl.removeEventListener('hidden.bs.modal', onHidden);
            };
            editEl.addEventListener('hidden.bs.modal', onHidden);
        }

        async function saveWarHistoryFromModal() {
            const saveBtn = document.getElementById('saveWarHistoryBtn');
            const errorEl = document.getElementById('editWarHistoryError');

            const warHistoryId = parseInt(document.getElementById('editWarHistoryId').value, 10);
            const fame = parseInt(document.getElementById('editFame').value, 10);
            const decksUsed = parseInt(document.getElementById('editDecksUsed').value, 10);
            const boatAttacks = parseInt(document.getElementById('editBoatAttacks').value, 10);

            // Basic client validation (adjust ranges as needed)
            if (Number.isNaN(fame) || fame < 0 || fame > 3600) {
                showEditError('Fame must be a between 0 and 3600.');
                return;
            }
            if (Number.isNaN(decksUsed) || decksUsed < 0 || decksUsed > 16) {
                showEditError('Attacks (Decks Used) must be between 0 and 16.');
                return;
            }
            if (Number.isNaN(boatAttacks) || boatAttacks < 0 || boatAttacks > 16) {
                showEditError('Boat Attacks must be a non-negative integer.');
                return;
            }

            saveBtn.disabled = true;
            const originalHtml = saveBtn.innerHTML;
            saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';

            try {
                const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
                const token = tokenInput ? tokenInput.value : '';

                const body = `warHistoryId=${encodeURIComponent(warHistoryId)}&fame=${encodeURIComponent(fame)}&decksUsed=${encodeURIComponent(decksUsed)}&boatAttacks=${encodeURIComponent(boatAttacks)}`;

                const response = await fetch('/WarHistories?handler=UpdateWarHistory', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': token
                    },
                    body
                });

                const result = await response.json();

                if (response.ok && result.success) {
                    warHistoryWasEdited = true;
                    // close edit modal (bootstrap modal instance created by editWarHistory)
                    const modalEl = document.getElementById('editWarHistoryModal');
                    const bsModal = bootstrap.Modal.getInstance(modalEl);
                    if (bsModal) bsModal.hide();

                    // refresh the war history list inside the Player Actions modal
                    if (typeof loadPlayerWarHistories === 'function') {
                        loadPlayerWarHistories();
                    }
                } else {
                    showEditError(result?.message ?? 'Failed to update war history.');
                }
            } catch (err) {
                console.error(err);
                showEditError('An error occurred while updating the war history.');
            } finally {
                saveBtn.disabled = false;
                saveBtn.innerHTML = originalHtml;
            }
        }

        function showUpdateDataModal()
        {
            var modal = new bootstrap.Modal(document.getElementById('updateDataModal'));
            modal.show();
        }

        function confirmUpdate(type)
        {
            const messages = {
                'weekly': 'This will run the weekly update process for all clans (last week of data). Continue?',
                'backlog': 'This will run the backlog update process for all clans (last 10 weeks of data). This may take several minutes. Continue?'
            };

            return confirm(messages[type]);
        }

        function showManageClansModal()
        {
            // Clear any previous inputs and errors
            document.getElementById('clanTagInput').value = '';
            document.getElementById('clanTagError').classList.add('d-none');

            // Reset the delete clan form
            const deleteClanSelect = document.getElementById('deleteClanSelect');
            if (deleteClanSelect)
            {
                deleteClanSelect.value = '';
                updateDeleteButton();
            }

            // Show the add clan tab by default
            const addClanTab = document.getElementById('add-clan-tab');
            const addClanPane = document.getElementById('add-clan');
            const deleteClanTab = document.getElementById('delete-clan-tab');
            const deleteClanPane = document.getElementById('delete-clan');

            addClanTab.classList.add('active');
            addClanPane.classList.add('show', 'active');
            deleteClanTab.classList.remove('active');
            deleteClanPane.classList.remove('show', 'active');

            var modal = new bootstrap.Modal(document.getElementById('manageClansModal'));
            modal.show();
        }

        function updateDeleteButton()
        {
            const deleteClanSelect = document.getElementById('deleteClanSelect');
            const deleteButton = document.getElementById('deleteClanSubmitBtn');

            if (deleteClanSelect && deleteButton)
            {
                deleteButton.disabled = !deleteClanSelect.value;
            }
        }

        function validateClanTag()
        {
            const clanTagInput = document.getElementById('clanTagInput');
            const clanTagError = document.getElementById('clanTagError');
            const submitBtn = document.getElementById('addClanSubmitBtn');

            const clanTag = clanTagInput.value.trim().toUpperCase();

            // Basic validation
            if (!clanTag) {
                clanTagError.textContent = 'Clan tag is required.';
                clanTagError.classList.remove('d-none');
                return false;
            }

            if (!/^[A-Z0-9]+$/.test(clanTag)) {
                clanTagError.textContent = 'Clan tag should only contain letters and numbers.';
                clanTagError.classList.remove('d-none');
                return false;
            }

            if (clanTag.length < 3 || clanTag.length > 15) {
                clanTagError.textContent = 'Clan tag should be between 3 and 15 characters.';
                clanTagError.classList.remove('d-none');
                return false;
            }

            // Update the input value to uppercase
            clanTagInput.value = clanTag;

            // Show loading state
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Adding...';
            submitBtn.disabled = true;

            clanTagError.classList.add('d-none');
            return true;
        }

        function showEditError(message) {
            const errorEl = document.getElementById('editWarHistoryError');
            errorEl.textContent = message;
            errorEl.classList.remove('d-none');
        }

        function refreshData() {
            location.reload();
        }

        function filterTable() {
            const searchInput = document.getElementById('searchInput').value.toLowerCase();
            
            const rows = document.querySelectorAll('#warHistoryTable tbody tr');
            let visibleCount = 0;
            let visibleRowNumber = 1;
            
            rows.forEach(row => {
                const playerName = row.getAttribute('data-player-name');
                const playerTag = row.getAttribute('data-player-tag');
                const clanName = row.getAttribute('data-clan-name');
                const status = row.getAttribute('data-status');
                
                let showRow = true;
                
                // Clan filter: if user selected any clans, require the row clan to be included
                if (selectedClans.size > 0 && !selectedClans.has(clanName)) {
                    showRow = false;
                }
                
                // Status filter: if user selected any statuses, require the row status to be included
                if (selectedStatuses.size > 0 && !selectedStatuses.has(status)) {
                    showRow = false;
                }
                
                // Search filter
                if (searchInput && !playerName.includes(searchInput) && !playerTag.includes(searchInput)) {
                    showRow = false;
                }
                
                row.style.display = showRow ? '' : 'none';
                if (showRow) {
                    visibleCount++;
                    const rowNumberCell = row.querySelector('.row-number strong');
                    if (rowNumberCell) {
                        rowNumberCell.textContent = visibleRowNumber;
                    }
                    visibleRowNumber++;
                }
            });
        }

        // Clan filter functions
        function toggleAllClans() {
            const selectAllCheckbox = document.getElementById('selectAllClans');
            const clanCheckboxes = document.querySelectorAll('.clan-checkbox');
            const isChecked = selectAllCheckbox.checked;

            selectedClans.clear();

            clanCheckboxes.forEach(checkbox => {
                checkbox.checked = isChecked;
                if (isChecked) {
                    selectedClans.add(checkbox.value);
                }
            });

            updateClanFilterText();
            filterTable();
        }

        function updateClanFilter() {
            const clanCheckboxes = document.querySelectorAll('.clan-checkbox');
            const selectAllCheckbox = document.getElementById('selectAllClans');

            selectedClans.clear();
            let checkedCount = 0;

            clanCheckboxes.forEach(checkbox => {
                if (checkbox.checked) {
                    selectedClans.add(checkbox.value);
                    checkedCount++;
                }
            });

            // Update "Select All" checkbox state
            selectAllCheckbox.checked = checkedCount === clanCheckboxes.length;
            selectAllCheckbox.indeterminate = checkedCount > 0 && checkedCount < clanCheckboxes.length;

            updateClanFilterText();
            filterTable();
        }

        function updateClanFilterText() {
            const clanFilterText = document.getElementById('clanFilterText');
            const totalClans = document.querySelectorAll('.clan-checkbox').length;

            if (selectedClans.size === 0) {
                clanFilterText.textContent = 'No Clans Selected';
            } else if (selectedClans.size === totalClans) {
                clanFilterText.textContent = 'All Clans';
            } else if (selectedClans.size === 1) {
                clanFilterText.textContent = Array.from(selectedClans)[0];
            } else {
                clanFilterText.textContent = `${selectedClans.size} Clans Selected`;
            }
        }

        // Status filter functions
        function toggleAllStatuses() {
            const selectAllCheckbox = document.getElementById('selectAllStatuses');
            const statusCheckboxes = document.querySelectorAll('.status-checkbox');
            const isChecked = selectAllCheckbox.checked;

            selectedStatuses.clear();

            statusCheckboxes.forEach(checkbox => {
                checkbox.checked = isChecked;
                if (isChecked) {
                    selectedStatuses.add(checkbox.value);
                }
            });

            updateStatusFilterText();
            filterTable();
        }

        function updateStatusFilter() {
            const statusCheckboxes = document.querySelectorAll('.status-checkbox');
            const selectAllCheckbox = document.getElementById('selectAllStatuses');

            selectedStatuses.clear();
            let checkedCount = 0;

            statusCheckboxes.forEach(checkbox => {
                if (checkbox.checked) {
                    selectedStatuses.add(checkbox.value);
                    checkedCount++;
                }
            });

            // Update "Select All" checkbox state
            selectAllCheckbox.checked = checkedCount === statusCheckboxes.length;
            selectAllCheckbox.indeterminate = checkedCount > 0 && checkedCount < statusCheckboxes.length;

            updateStatusFilterText();
            filterTable();
        }

        function updateStatusFilterText() {
            const statusFilterText = document.getElementById('statusFilterText');
            const totalStatuses = document.querySelectorAll('.status-checkbox').length;

            if (selectedStatuses.size === 0) {
                statusFilterText.textContent = 'No Status Selected';
            } else if (selectedStatuses.size === totalStatuses) {
                statusFilterText.textContent = 'All Statuses';
            } else if (selectedStatuses.size === 1) {
                statusFilterText.textContent = Array.from(selectedStatuses)[0];
            } else {
                statusFilterText.textContent = `${selectedStatuses.size} Statuses Selected`;
            }
        }

        function sortTable(column) {
            const table = document.getElementById('warHistoryTable');
            const tbody = table.tBodies[0];
            const rows = Array.from(tbody.rows);
            
            // Determine sort direction
            const isAscending = sortDirection[column] !== 'asc';
            sortDirection[column] = isAscending ? 'asc' : 'desc';
            
            rows.sort((a, b) => {
                let aVal, bVal;
                
                switch(column) {
                    case 'tag':
                        aVal = a.getAttribute('data-player-tag');
                        bVal = b.getAttribute('data-player-tag');
                        break;
                    case 'player':
                        aVal = a.getAttribute('data-player-name');
                        bVal = b.getAttribute('data-player-name');
                        break;
                    case 'clan':
                        aVal = a.getAttribute('data-clan-name');
                        bVal = b.getAttribute('data-clan-name');
                        break;
                    case 'status':
                        const aCell = a.cells[4].querySelector('[data-sort-value]');
                        const bCell = b.cells[4].querySelector('[data-sort-value]');

                        aVal = aCell ? parseFloat(aCell.getAttribute('data-sort-value')) : 0;
                        bVal = bCell ? parseFloat(bCell.getAttribute('data-sort-value')) : 0;

                        return isAscending ? aVal - bVal : bVal - aVal;
                    default:
                        return 0;
                }
                
                return isAscending ? aVal.localeCompare(bVal) : bVal.localeCompare(aVal);
            });
            
            // Re-append sorted rows
            rows.forEach(row => tbody.appendChild(row));
            
            // Update row numbers after sorting
            updateRowNumbers();
            
            // Update sort indicators
            updateSortIndicators(column, isAscending);
        }

        function updateRowNumbers() {
            const visibleRows = document.querySelectorAll('#warHistoryTable tbody tr:not([style*="display: none"])');
            visibleRows.forEach((row, index) => {
                const rowNumberCell = row.querySelector('.row-number strong');
                if (rowNumberCell) {
                    rowNumberCell.textContent = index + 1;
                }
            });
        }

        function updateSortIndicators(activeColumn, isAscending) {
            const headers = document.querySelectorAll('#warHistoryTable th i.fas');
            headers.forEach((icon) => {
                icon.className = 'fas fa-sort';
            });
            
            // Find the active column header and update its icon
            const activeHeader = document.querySelector(`[onclick="sortTable('${activeColumn}')"] i`);
            if (activeHeader) {
                activeHeader.className = `fas fa-sort-${isAscending ? 'up' : 'down'}`;
            }
        }

        function clearFilters() {
            document.getElementById('searchInput').value = '';
            
            // Reset clan filter to select all
            const selectAllClansCheckbox = document.getElementById('selectAllClans');
            const clanCheckboxes = document.querySelectorAll('.clan-checkbox');
            
            selectAllClansCheckbox.checked = true;
            selectedClans.clear();
            
            clanCheckboxes.forEach(checkbox => {
                checkbox.checked = true;
                selectedClans.add(checkbox.value);
            });
            
            // Reset status filter to select all
            const selectAllStatusCheckbox = document.getElementById('selectAllStatuses');
            const statusCheckboxes = document.querySelectorAll('.status-checkbox');
            
            selectAllStatusCheckbox.checked = true;
            selectedStatuses.clear();
            
            statusCheckboxes.forEach(checkbox => {
                checkbox.checked = true;
                selectedStatuses.add(checkbox.value);
            });
            
            updateClanFilterText();
            updateStatusFilterText();
            filterTable();
        }

        function initializeFilters() {
            // Initialize clan filter with all clans selected
            const clanCheckboxes = document.querySelectorAll('.clan-checkbox');
            clanCheckboxes.forEach(checkbox => {
                selectedClans.add(checkbox.value);
            });
            updateClanFilterText();
            
            // Initialize status filter with all statuses selected
            const statusCheckboxes = document.querySelectorAll('.status-checkbox');
            statusCheckboxes.forEach(checkbox => {
                selectedStatuses.add(checkbox.value);
            });
            updateStatusFilterText();
        }

        // Initialize when page loads
        document.addEventListener('DOMContentLoaded', function() {
            initializeFilters();

            // Set initial sort indicator for Fame/Attack column (descending)
            sortDirection['status'] = 'desc';
            updateSortIndicators('status', false); // false = descending

            // Initialize tooltips
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            const tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });

        // Add event listener for player modal close
        const playerActionsModal = document.getElementById('playerActionsModal');
        if (playerActionsModal) {
            playerActionsModal.addEventListener('hidden.bs.modal', function () {
            // Only reload if war history was edited
            if (warHistoryWasEdited) {
                location.reload();
            }
        });
    }
        
    </script>

    <style>
        /* REMOVE Bootstrap's default striping and create custom full-row striping */
        #warHistoryTable tbody tr:nth-child(odd) {
            background-color: white !important;
        }
        
        #warHistoryTable tbody tr:nth-child(even) {
            background-color: #f8f9fa !important; /* Bootstrap's light gray */
        }
        
        /* Ensure sticky columns inherit the row background AND prevent bleed-through */
        #warHistoryTable tbody tr:nth-child(odd) td[style*="position: sticky"] {
            background-color: white !important;
        }
        
        #warHistoryTable tbody tr:nth-child(even) td[style*="position: sticky"] {
            background-color: #f8f9fa !important;
        }
        
        #warHistoryTable tbody tr.inactive-player {
            background-color: #fff1f3 !important; /* Light red background */
        }

        #warHistoryTable tbody tr.inactive-player:hover {
            background-color: #ffeaed !important; /* Slightly darker red on hover */
        }

        /* Ensure inactive sticky columns also get the red background */
        #warHistoryTable tbody tr.inactive-player td[style*="position: sticky"] {
            background-color: #fff1f3 !important;
        }

        /* Also ensure ALL cells in inactive rows get the red background */
        #warHistoryTable tbody tr.inactive-player td {
            background-color: #fff1f3 !important;
        }

        #warHistoryTable tbody tr.inactive-player:hover td {
            background-color: #ffeaed !important;
        }

        /* L2W */
        #warHistoryTable tbody tr.l2w-player {
            background-color: #fff9c4 !important; /* Light yellow background */
        }

        #warHistoryTable tbody tr.l2w-player:hover {
            background-color: #fff176 !important; /* Slightly darker yellow on hover */
        }

        /* Ensure L2W sticky columns also get the yellow background */
        #warHistoryTable tbody tr.l2w-player td[style*="position: sticky"] {
            background-color: #fff9c4 !important;
        }

        /* Also ensure ALL cells in L2W rows get the yellow background */
        #warHistoryTable tbody tr.l2w-player td {
            background-color: #fff9c4 !important;
        }

        #warHistoryTable tbody tr.l2w-player:hover td {
            background-color: #fff176 !important;
        }

        /* Update the general hover effect to respect status-specific backgrounds */
        #warHistoryTable tbody tr:not(.inactive-player):not(.l2w-player):hover td {
            background-color: #e9ecef !important; /* Same hover color for ACTIVE players only */
        }

        /* Override the general hover for all rows to be more specific */
        #warHistoryTable tbody tr:hover {
            background-color: unset !important; /* Remove general hover, let specific classes handle it */
        }

        #warHistoryTable tbody tr:hover td {
            background-color: unset !important; /* Remove general hover, let specific classes handle it */
        }

        /* Active players hover effect */
        #warHistoryTable tbody tr:not(.inactive-player):not(.l2w-player):hover {
            background-color: #e3f2fd !important;
        }

        #warHistoryTable tbody tr:not(.inactive-player):not(.l2w-player):hover td {
            background-color: #e3f2fd !important;
        }
        
        
   
        .war-cell {
            font-family: 'Courier New', monospace;
            font-size: 0.9em;
            line-height: 1.0;
            white-space: normal !important;
            overflow: visible !important;
            text-overflow: unset !important;
            height: auto !important;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            writing-mode: initial !important;
            text-orientation: initial !important;
            padding: 1px 0;
        }
        
        .fame-value {
            font-weight: bold;
            font-size: 1.1em;
            margin: 0;
            padding: 0;
            line-height: 0.9;
            writing-mode: initial !important;
            text-orientation: initial !important;
        }
        
        .attacks-value {
            margin: 0;
            padding: 0;
            line-height: 0.9;
            font-size: 0.95em !important;
            writing-mode: initial !important;
            text-orientation: initial !important;
        }
        
        .table-responsive {
            width: 100%;
            margin: 0;
        }
        
        .sticky-top {
            position: sticky;
            top: 0;
            z-index: 10;
        }
        
        /* Dark theme styles for sticky headers */
        .table-dark th {
            border-color: #495057;
        }
        
        /* Ensure text in sticky columns is readable */
        td[style*="position: sticky"] {
            box-shadow: 2px 0 5px rgba(0,0,0,0.1);
        }
        
        /* UPDATED: Fixed column widths with new row number column */
        #warHistoryTable th:nth-child(1),
        #warHistoryTable td:nth-child(1) {
            width: 50px;
            min-width: 50px;
            max-width: 50px;
        }
        
        #warHistoryTable th:nth-child(2),
        #warHistoryTable td:nth-child(2) {
            width: 90px;
            min-width: 90px;
            max-width: 90px;
        }
        
        #warHistoryTable th:nth-child(3),
        #warHistoryTable td:nth-child(3) {
            width: 120px;
            min-width: 120px;
            max-width: 120px;
        }
        
        #warHistoryTable th:nth-child(4),
        #warHistoryTable td:nth-child(4) {
            width: 100px;
            min-width: 100px;
            max-width: 100px;
        }
        
        #warHistoryTable th:nth-child(5),
        #warHistoryTable td:nth-child(5) {
            width: 80px;
            min-width: 80px;
            max-width: 80px;
        }
        
        /* ALL Season/week columns - FIXED SIZE */
        .season-week-column {
            width: 85px !important;
            min-width: 85px !important;
            max-width: 85px !important;
            padding: 0.1rem !important;
        }
        
        /* COMPACT ROW HEIGHT */
        #warHistoryTable tr {
            height: 36px;
        }
        
        #warHistoryTable td,
        #warHistoryTable th {
            height: 36px;
            padding: 0.2rem 0.1rem !important;
            vertical-align: middle;
        }
        
        /* Header rows slightly taller for readability */
        #warHistoryTable thead tr {
            height: 42px;
        }
        
        #warHistoryTable thead th {
            height: 42px;
            padding: 0.25rem 0.1rem !important;
        }
        
        /* General text truncation - but NOT for war cells */
        #warHistoryTable td:not(.season-week-column) {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        
        /* Season/week columns should allow stacked content */
        #warHistoryTable td.season-week-column {
            white-space: normal !important;
            overflow: visible !important;
            text-overflow: unset !important;
        }
        
        /* Row number column styling */
        .row-number {
            text-align: center !important;
            font-size: 0.75em;
        }
        
        /* Compact text and elements */
        code {
            font-size: 0.75em;
        }

        /* Force table to use fixed layout */
        #warHistoryTable {
            table-layout: fixed;
            width: auto;
            min-width: auto;
        }
        
        /* Smaller font sizes for compact display */
        #warHistoryTable {
            font-size: 0.75em;
        }
        
        #warHistoryTable strong {
            font-size: 0.85em;
        }
        
        /* UPDATED: Adjust sticky column positions for new row number column */
        #warHistoryTable th:nth-child(1),
        #warHistoryTable td:nth-child(1) {
            position: sticky;
            left: 0;
            z-index: 5;
        }
        
        #warHistoryTable th:nth-child(2),
        #warHistoryTable td:nth-child(2) {
            position: sticky;
            left: 50px;
            z-index: 5;
        }
        
        #warHistoryTable th:nth-child(3),
        #warHistoryTable td:nth-child(3) {
            position: sticky;
            left: 140px;
            z-index: 5;
        }
        
        #warHistoryTable th:nth-child(4),
        #warHistoryTable td:nth-child(4) {
            position: sticky;
            left: 260px;
            z-index: 5;
        }
        
        #warHistoryTable th:nth-child(5),
        #warHistoryTable td:nth-child(5) {
            position: sticky;
            left: 360px;
            z-index: 5;
        }
        
        /* Header specific styling */
        #warHistoryTable thead th {
            background-color: var(--bs-dark) !important;
            z-index: 10 !important;
        }
        
        #warHistoryTable thead th.season-week-column > div:not(.war-cell) {
            writing-mode: initial !important; /* Changed from vertical-lr */
            text-orientation: initial !important; /* Changed from mixed */
            white-space: nowrap;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .text-custom-orange {
            color: #e67e22 !important;
        }

        .bg-custom-orange {
            background-color: #e67e22 !important;
            color: white !important;
        }

        .text-dark-red {
            color: #c82333 !important;
        }

        .bg-dark-red {
            background-color: #c82333 !important;
            color: white !important;
        }

        .modal.faded-behind {
            filter: brightness(0.65) blur(1px);
            pointer-events: none;
            transition: filter .18s ease;
        }

        #editWarHistoryModal {
            z-index: 11000; /* Higher than Bootstrap modal default */
        }
    </style>
} *@